# -*- coding: utf-8 -*-
"""Sistem Rekomendasi Tempat Wisata

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lgxSk7aNIe4WIQnUDrnG_s4_mMctFyIR

# Data Understanding

Data yang digunakan dalam analisis ini berasal dari dataset [Indonesia Tourism Destination](https://www.kaggle.com/datasets/aprabowo/indonesia-tourism-destination?select=tourism_rating.csv) yang dapat diunduh di Kaggle.

## Install & Load Dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from pathlib import Path

"""## Loading data"""

from google.colab import drive
drive.mount('/content/drive')

tourism_rating = pd.read_csv("/content/drive/MyDrive/Proyek 2/tourism_rating.csv")
tourism_with_id = pd.read_csv("/content/drive/MyDrive/Proyek 2/tourism_with_id.csv")
user_data = pd.read_csv("/content/drive/MyDrive/Proyek 2/user.csv")

"""# Data Preparation

## Drop Unused Column
"""

tourism_with_id.isnull().sum()

"""Pada tahap ini fitur yang tidak digunakan dalam analisis yaitu kolom Unnamed: 11 dan Unnamed: 12 akan di drop dari analisis. Selain itu kolom Time_Minutes juga di drop karena terlalu banyak nilai hilang."""

tourism_with_id = tourism_with_id.drop(['Time_Minutes','Unnamed: 11','Unnamed: 12'], axis = 1)

tourism_rating.isnull().sum()

user_data.isnull().sum()

"""# Data Preprocessing

## Merge dataset

### Merge dataset destinasi wisata dengan rating
"""

destination_rating = pd.merge(tourism_rating, tourism_with_id[['Place_Id']], how='right', on='Place_Id')
destination_rating

"""### Merge rating dengan user"""

user_rating = pd.merge(user_data, destination_rating[['User_Id']], how='right', on='User_Id').drop_duplicates().sort_values('User_Id')
user_rating

"""# EDA"""

destination_rating.head()

tourism_with_id.head()

user_rating.head()

print('Jumlah destinasi wisata: ', len(tourism_with_id.Place_Id.unique()))
print('Jumlah rating: ', len(tourism_rating))
print('Jumlah pengguna: ', len(user_data.User_Id.unique()))

"""### Variabel destinasi wisata"""

tourism_with_id.info()

tourism_with_id['Category'] = tourism_with_id['Category'].replace('Taman Hiburan','Taman_Hiburan')
tourism_with_id['Category'] = tourism_with_id['Category'].replace('Cagar Alam','Cagar_Alam')
tourism_with_id['Category'] = tourism_with_id['Category'].replace('Pusat Perbelanjaan','Pusat_Perbelanjaan')
tourism_with_id['Category'] = tourism_with_id['Category'].replace('Tempat Ibadah','Tempat_Ibadah')

print('Jumlah destinasi wisata: ', len(tourism_with_id.Place_Id.unique()))
print('Jumlah kategori: ', len(tourism_with_id.Category.unique()))
print('Jenis kategori: ', tourism_with_id.Category.unique())
print('Jumlah kota destinasi wisata: ', len(tourism_with_id.City.unique()))
print('Daftar kota destinasi wisata: ', tourism_with_id.City.unique())

tourism_with_id.describe()

"""### Variabel Rating"""

tourism_rating.info()

tourism_rating.describe()

"""### Variabel Pengguna"""

user_data.info()

user_data.describe()

"""## Visualisasi data

### Daerah dengan jumlah tempat wisata terbanyak
"""

fig, ax = plt.subplots(figsize=(10,5))

sns.countplot(data=tourism_with_id, y='City', order=tourism_with_id.City.value_counts().index, palette='Set2')
plt.xlabel('Number of tourism destination')
plt.ylabel('City')
plt.title("Distribution of tourism destination across 5 cities")

"""### Jumlah tempat wisata menurut kategori"""

fig, ax = plt.subplots(figsize=(10,5))

sns.countplot(data=tourism_with_id, y='Category', order=tourism_with_id.Category.value_counts().index, palette='Set2')
plt.xlabel('Number of tourism destination')
plt.ylabel('Category')
plt.title("Distribution of tourism destination by category")

tourism_with_id.Category.value_counts()

"""### Tempat wisata dengan rating terbanyak"""

top_rated = destination_rating['Place_Id'].value_counts().reset_index()[0:10]
top_rated = pd.merge(top_rated, tourism_with_id[['Place_Id','Place_Name']], how='left', left_on='index', right_on='Place_Id')

plt.figure(figsize=(10,5))
sns.barplot(x='Place_Id_x', y='Place_Name', data=top_rated, palette='Set2')
plt.title('Most Rated Destinations', pad=20)
plt.ylabel('Number of Rating')
plt.xlabel('Destination Name')
plt.show()

"""### Tempat wisata dengan rata-rata rating tertinggi"""

highest_rated = tourism_with_id.groupby('Place_Name').Rating.mean().sort_values(ascending=False)[0:10].reset_index(name="Rating")

plt.figure(figsize=(10,5))
sns.barplot(x='Rating', y='Place_Name', data=highest_rated, palette='Set2')
plt.title('Best Rated Destinations', pad=20)
plt.ylabel('Average Rating')
plt.xlabel('Destination Name')
plt.show()

"""### Tempat wisata dengan harga tiket masuk termahal & termurah"""

expensive = tourism_with_id.nlargest(10, 'Price')

plt.figure(figsize=(10,5))
sns.barplot(y=expensive['Place_Name'], x=expensive['Price'], data=expensive, palette='Set2')
plt.title('Most Expensive Destination', pad=20)
plt.ylabel('Destination Name')
plt.xlabel('Ticket Price')
plt.show()

"""### Daerah dengan jumlah pengguna terbanyak"""

fig, ax = plt.subplots(figsize=(10,8))

sns.countplot(data=user_data, y='Location', order=user_data.Location.value_counts().index)
plt.xlabel('Number of Users')
plt.ylabel('City')
plt.title("Number of Users by City")

"""### Distribusi usia pengguna"""

fig, ax = plt.subplots(figsize=(8,5))

sns.countplot(data=user_data, x='Age')
plt.xlabel('Users Age')
plt.ylabel('Count')
plt.title("Number of User by Age")

"""# Modeling

## Content Based Filtering

### TF-IDF
"""

from sklearn.feature_extraction.text import TfidfVectorizer

tf_idf = TfidfVectorizer()

tf_idf.fit(tourism_with_id['Category'])

tf_idf.get_feature_names_out()

tfidf_matrix = tf_idf.fit_transform(tourism_with_id['Category'])
tfidf_matrix.shape

tfidf_matrix.todense()

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf_idf.get_feature_names_out(),
    index=tourism_with_id.Place_Name
).sample(10, axis=0)

"""### Cosine similarity"""

from sklearn.metrics.pairwise import cosine_similarity

cosine = cosine_similarity(tfidf_matrix)
cosine

cosine_sim = pd.DataFrame(
    cosine, index=tourism_with_id.Place_Name, columns=tourism_with_id.Place_Name)
print('Shape:', cosine_sim.shape)

cosine_sim.sample(10, axis=0)

"""### Implementasi sistem rekomendasi"""

def destination_recommendations(place_name, similarity_data=cosine_sim, items=tourism_with_id[['Place_Name', 'City', 'Category']], k=10):
    index = similarity_data.loc[:,place_name].to_numpy().argpartition(range(-1, -k, -1))
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    closest = closest.drop(place_name, errors='ignore')
    return pd.DataFrame(closest).merge(items).head(k)

place_name = 'Monumen Nasional'
tourism_with_id[tourism_with_id.Place_Name.eq(place_name)]

destination_recommendations(place_name)

place_name = 'Pantai Cipta'
tourism_with_id[tourism_with_id.Place_Name.eq(place_name)]

destination_recommendations(place_name)

place_name = 'Hutan Bambu Keputih'
tourism_with_id[tourism_with_id.Place_Name.eq(place_name)]

destination_recommendations(place_name)

"""### Evaluasi model

Dari hasil pemodelan dapat dilihat akurasi 100% untuk beberapa percobaan yang dilakukan, dengan kategori rekomendasi yang sesuai.

## Collaborative Filtering

### Data understanding
"""

data = destination_rating.copy()

data

"""### Data preparation

#### Mengubah User_Id menjadi list tanpa nilai duplikat
"""

user_ids = data['User_Id'].unique().tolist()
print('list User ID : ', user_ids)

"""#### Melakukan encoding User_Id"""

user_to_user_encoded = {x: i for i, x in enumerate(user_ids)}
print('encoded user ID : ', user_to_user_encoded)

"""#### Encoding angka ke User ID"""

user_encoded_to_user = {i: x for i, x in enumerate(user_ids)}
print('encoded angka ke user ID: ', user_encoded_to_user)

"""#### Mengubah Place Id menjadi list tanpa duplikat"""

destination_ids = data['Place_Id'].unique().tolist()

"""#### Melakukan encoding Place_Id"""

destination_to_destination_encoded = {x: i for i, x in enumerate(destination_ids)}

"""#### Encoding angka ke Place ID"""

destination_encoded_to_destination = {i: x for i, x in enumerate(destination_ids)}

"""#### Petakan user id dan place id ke dataframe yang berkaitan"""

data['user'] = data['User_Id'].map(user_to_user_encoded)
data['destination'] = data['Place_Id'].map(destination_to_destination_encoded)

"""#### Cek data"""

num_users = len(user_to_user_encoded)
print(num_users)

num_destination = len(destination_encoded_to_destination)
print(num_destination)

data['rating'] = data['Place_Ratings'].values.astype(np.float32)

min_rating = min(data['rating'])

max_rating = max(data['rating'])

print('Number of User: {}, Number of Destination: {}, Min Rating: {}, Max Rating: {}'.format(
    num_users, num_destination, min_rating, max_rating
))

"""#### Membagi data untuk training dan validasi"""

data = data.sample(frac=1, random_state=50)
data

"""#### Membuat variabel x untuk mencocokkan data user dan destinasi wisata"""

x = data[['user','destination']].values

"""#### Membuat variabel y untuk membuat rating dari hasil"""

y = data['rating'].apply(lambda x: (x-min_rating) / (max_rating-min_rating)).values

"""#### Membagi data menjadi 80% data train dan 20% data validasi"""

train_indices = int(0.8 * data.shape[0])

x_train, x_val, y_train, y_val = (
    x[:train_indices],
    x[train_indices:],
    y[:train_indices],
    y[train_indices:]
)

print(x, y)

"""### Training model"""

class RecommenderNet(tf.keras.Model):

  def __init__(self, num_users, num_destination, embedding_size, **kwargs):
    super(RecommenderNet, self).__init__(**kwargs)
    self.num_users = num_users
    self.num_destination = num_destination
    self.embedding_size = embedding_size
    self.user_embedding = layers.Embedding(
        num_users,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.user_bias = layers.Embedding(num_users, 1)
    self.destination_embedding = layers.Embedding(
        num_destination,
        embedding_size,
        embeddings_initializer='he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.destination_bias = layers.Embedding(num_destination, 1)

  def call(self, inputs):
    user_vector = self.user_embedding(inputs[:,0])
    user_bias = self.user_bias(inputs[:, 0])
    destination_vector = self.destination_embedding(inputs[:, 1])
    destination_bias = self.destination_bias(inputs[:, 1])

    dot_user_destination = tf.tensordot(user_vector, destination_vector, 2)

    x = dot_user_destination + user_bias + destination_bias

    return tf.nn.sigmoid(x)

"""#### Compile model"""

model = RecommenderNet(num_users, num_destination, 50)

model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = keras.optimizers.Adam(learning_rate=0.001),
    metrics=[tf.keras.metrics.RootMeanSquaredError()]
)

"""#### Memulai training"""

history = model.fit(
    x = x_train,
    y = y_train,
    #batch_size = 8,
    epochs = 100,
    validation_data = (x_val, y_val)
)

"""#### Visualisasi metrik training"""

plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('model_metrics')
plt.ylabel('root_mean_squared_error')
plt.xlabel('epoch')
plt.ylim(ymin=0, ymax=0.5)
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model = RecommenderNet(num_users, num_destination, 50)

model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = keras.optimizers.Adam(learning_rate=0.001),
    metrics=[tf.keras.metrics.MeanAbsoluteError()]
)

history = model.fit(
    x = x_train,
    y = y_train,
    epochs = 100,
    validation_data = (x_val, y_val)
)

plt.plot(history.history['mean_absolute_error'])
plt.plot(history.history['val_mean_absolute_error'])
plt.title('model_metrics')
plt.ylabel('mean_absolute_error')
plt.xlabel('epoch')
plt.ylim(ymin=0, ymax=0.5)
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""### Mendapatkan rekomendasi destinasi wisata

#### Menyiapkan dataframe untuk hasil rekomendasi
"""

destination_data = tourism_with_id[['Place_Id','Place_Name','City','Category','Rating','Price']]
destination_data.columns = ['id','place_name','city','category','rating','price']
df = destination_rating.copy()

"""#### Mengambil contoh user untuk menampilkan rekomendasi"""

user_id = df.User_Id.sample(1).iloc[0]
place_visited_by_user = df[df.User_Id == user_id]

"""#### Mengambil tempat yang belum dikunjungi oleh user"""

place_not_visited = destination_data[~destination_data['id'].isin(place_visited_by_user.Place_Id.values)]['id']
place_not_visited = list(
    set(place_not_visited)
    .intersection(set(destination_to_destination_encoded.keys()))
)

place_not_visited = [[destination_to_destination_encoded.get(x)] for x in place_not_visited]
user_encoder = user_to_user_encoded.get(user_id)
user_place_array = np.hstack(
    ([[user_encoder]] * len(place_not_visited), place_not_visited)
)

"""#### Menampilkan destinasi untuk user"""

ratings = model.predict(user_place_array).flatten()
top_ratings_indices = ratings.argsort()[-7:][::-1]
recommended_place_ids = [
    destination_encoded_to_destination.get(place_not_visited[x][0]) for x in top_ratings_indices
]

print('Daftar rekomendasi destinasi wisata untuk: {}'.format('User ' + str(user_id)))
print('===' * 15,'\n')
print('----' * 15)
print('Tempat dengan rating wisata paling tinggi dari user')
print('----' * 15)

top_place_user = (
    place_visited_by_user.sort_values(
        by = 'Place_Ratings',
        ascending=False
    )
    .head(5)
    .Place_Id.values
)

place_df_rows = destination_data[destination_data['id'].isin(top_place_user)]
for row in place_df_rows.itertuples():
    print(row.place_name, ':', row.category)

print('')
print('----' * 15)
print('7 Rekomendasi tempat wisata teratas')
print('----' * 15)

recommended_place = destination_data[destination_data['id'].isin(recommended_place_ids)]
for row, i in zip(recommended_place.itertuples(), range(1,8)):
    print(i,'.', row.place_name, '\n    ', row.city, ',', row.category, ',', 'Harga Tiket Masuk ', row.price, ',', 'Rating Wisata ', row.rating,'\n')

print('==='*15)

